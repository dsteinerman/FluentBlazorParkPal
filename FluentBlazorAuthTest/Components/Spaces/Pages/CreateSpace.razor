@page "/spaces/create"


@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using FluentBlazorAuthTest.Data
@using System.Diagnostics
@using System.ComponentModel.DataAnnotations
@using System.Runtime.InteropServices
@using FluentBlazorAuthTest.Services

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject GeocodingService GeocodingService
@inject FluentBlazorAuthTest.Data.ApplicationDbContext DB

@attribute [Authorize]

@rendermode InteractiveServer

<PageTitle>ParkPal - Create Your Space</PageTitle>

<h1>Create Your Space</h1>
<h3><em>Fill in your space's details below</em></h3>

<hr />
<div class="row">
    <div class="col-md-4">
        <FluentCard AreaRestricted="false">
            <MapSearch @ref="mapComponent" />
            <input type="text" @bind="searchQuery" required="true"/>
            <FluentButton IconEnd="@(new Icons.Regular.Size16.Globe())"
                          Appearance="Appearance.Accent"
                          OnClick="@SubmitQuery">
                Search
            </FluentButton>
            @* Embed Google Map *@
        </FluentCard>
        <br />
        <EditForm method="post" Model="NewSpace" OnValidSubmit="AddSpace" FormName="create" Enhance>
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger"/>
            <FluentCard AreaRestricted="false">
                <h4>Listed Price:</h4>
                <FluentNumberField id="price" @bind-Value="NewSpace.Price" class="form-control"/>
                <ValidationMessage For="() => NewSpace.Price" class="text-danger"/>
            </FluentCard>
            <br/>
            @* Size Dropdown *@
            <FluentCard AreaRestricted="false">
                <h4>Size:</h4>
                <InputSelect @bind-Value="_selectedSize">
                    @foreach (var size in SizeOptions)
                    {
                        <option value="@size">@size</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => NewSpace.Size" class="text-danger"/>
            </FluentCard>
            <br/>
            @* Description TextArea *@
            <FluentCard AreaRestricted="false">
                <h4>Description</h4>
                <FluentTextArea Appearance="FluentInputAppearance.Filled" id="description" @bind-Value="NewSpace.Description" class="form-control" Placeholder="Write a description..." Spellcheck="true"/>
                <ValidationMessage For="() => NewSpace.Description" class="text-danger"/>
            </FluentCard>
            <br/>
            @* IsPublic CheckBox *@
            <div class="mb-3">
                <em> I want this Space to be public and available upon submission. </em>
                <InputCheckbox id="ispublic" @bind-Value="NewSpace.IsPublic" class="form-check-input"/>
                <ValidationMessage For="() => NewSpace.IsPublic" class="text-danger"/>
            </div>
            <br/>
            <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Create Space</FluentButton>
        </EditForm>

    </div>
</div>

@code {

    // Map Search Query Handler
    private string searchQuery;
    private MapSearch mapComponent;

    // Map Geocoding parameters
    private decimal latitude;
    private decimal longitude;

    private async Task SubmitQuery()
    {
        Console.WriteLine($"Submitting query: {searchQuery}");
        await mapComponent.UpdateMapAsync(searchQuery);

        // Call the GeocodingService to get coordinates
        var (Latitude, Longitude, Status) = await GeocodingService.GeocodeAddress(searchQuery);

        if (Status == "OK")
        {
            // Update the Space entity with the obtained coordinates
            NewSpace.Latitude = (decimal)Latitude;
            NewSpace.Longitude = (decimal)Longitude;
        }
    }

    private void HandleSearchQueryChange(string query)
    {
        // Additional logic for search-query changes goes here
    }

    // Values Managing the size-enum dropdown menu
    private SpaceSize _selectedSize;
    private IEnumerable<SpaceSize> SizeOptions => Enum.GetValues(typeof(SpaceSize)).Cast<SpaceSize>();


    [SupplyParameterFromForm]
    public Space NewSpace { get; set; } = new();
    private ApplicationUser? currentUser;

    public Space ConfigureSpace(Space space)
    {
        Debug.Assert(currentUser != null, nameof(currentUser) + " != null");
        space.HostId = currentUser.Id;
        space.Size = _selectedSize;
        // Use the coordinates obtained from the Geocoding API
        space.Latitude = NewSpace.Latitude;
        space.Longitude = NewSpace.Longitude;

        return space;
    }

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddSpace()
    {
        ConfigureSpace(NewSpace);
        DB.Spaces.Add(NewSpace);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/spaces");
    }

    // Task that grabs the currently logged-in user's ID
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            var userId = UserManager.GetUserId(user);
            if (userId != null)
                currentUser = await UserManager.FindByIdAsync(userId);
        }
    }

    // This page's input model.
    // This handles validation for end-user form input among other things. (e.g., defining data types which can be adapted based on user locale.)
    private sealed class InputModel
    {
        [Required]
        public string Location { get; set; } = "";

        [Required]
        [DataType(DataType.Currency)]
        [RegularExpression(@"[0-9]{1,3}(,[0-9]{3})*(\.[0-9]{2})?",
            ErrorMessage = "Price must be in [##.##] format.")]
        [Range(0, double.MaxValue, ErrorMessage = "Price must be a positive value")]
        public decimal Price { get; set; }

        [Required]
        public SpaceSize Size { get; set; }

        [Required]
        public string Description { get; set; } = "";

        [Required]
        public bool IsPublic { get; set; }
    }
}
