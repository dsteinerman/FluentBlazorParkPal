@page "/spaces/create"


@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using FluentBlazorAuthTest.Data
@using System.Diagnostics
@using System.ComponentModel.DataAnnotations
@using FluentBlazorAuthTest.Services
@using Microsoft.EntityFrameworkCore

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject GeocodingService GeocodingService
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory

@attribute [Authorize]

@rendermode InteractiveServer

<PageTitle>ParkPal - Create Your Space</PageTitle>

<h1>Create Your Space</h1>
<h3><em>Fill in your space's details below</em></h3>

<hr />

<FluentGrid
    Justify="JustifyContent.FlexStart">
    <FluentGridItem>
        <FluentStack Orientation="Orientation.Vertical">
            <FluentCard AreaRestricted="false">
                <FluentStack Orientation="Orientation.Horizontal">
                    @* Embed Google Map *@
                    <MapSearch @ref="_mapComponent"/>
                    <input type="text" @bind="_searchQuery" required="true"/>
                    <FluentButton IconEnd="@(new Icons.Regular.Size16.Globe())"
                                  Appearance="Appearance.Accent"
                                  OnClick="@SubmitQuery">
                        Search
                    </FluentButton>
                </FluentStack>
            </FluentCard>
            <EditForm method="post" Model="NewSpace" OnValidSubmit="AddSpace" FormName="create" Enhance>
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger"/>
                <FluentCard AreaRestricted="false">
                    <h4>Listed Price:</h4>
                    <FluentNumberField id="price" @bind-Value="NewSpace.Price" class="form-control"/>
                    <ValidationMessage For="() => NewSpace.Price" class="text-danger"/>
                </FluentCard>
                <br/>
                @* Size Dropdown *@
                <FluentCard AreaRestricted="false">
                    <h4>Size:</h4>
                    <InputSelect @bind-Value="_selectedSize">
                        @foreach (var size in SizeOptions)
                        {
                            <option value="@size">@size</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => NewSpace.Size" class="text-danger"/>
                </FluentCard>
                <br/>
                @* Description TextArea *@
                <FluentCard AreaRestricted="false">
                    <h4>Description</h4>
                    <FluentTextArea Appearance="FluentInputAppearance.Filled" id="description" @bind-Value="NewSpace.Description" Placeholder="Write a description..." Spellcheck="true"/>
                    <ValidationMessage For="() => NewSpace.Description" class="text-danger"/>
                </FluentCard>
                <br/>
                @* IsPublic CheckBox *@
                <FluentCard>
                    <FluentCheckbox bind-Value="@NewSpace.IsPublic"
                                    id="ispublic"
                                    bind-CheckState="@NewSpace.IsPublic"
                                    Label="I want this Space to be public and available upon submission."/>
                    <ValidationMessage For="() => NewSpace.IsPublic" class="text-danger"/>
                </FluentCard>
                <br/>
                <FluentButton 
                    Type="ButtonType.Submit" 
                    Appearance="Appearance.Accent">Create Space</FluentButton>
            </EditForm>
        </FluentStack>
    </FluentGridItem>
</FluentGrid>

@code {
    // Map Search Query Handler
    private string _searchQuery;
    private MapSearch _mapComponent;

    // Values Managing the size-enum dropdown menu
    private SpaceSize _selectedSize;
    private IEnumerable<SpaceSize> SizeOptions => Enum.GetValues(typeof(SpaceSize)).Cast<SpaceSize>();

    [SupplyParameterFromForm]
    public Space NewSpace { get; set; } = new();
    private ApplicationUser? _currentUser;

    private async Task SubmitQuery()
    {
        Console.WriteLine($"Submitting query: {_searchQuery}");
        await _mapComponent.UpdateMapAsync(_searchQuery);

        // Call the GeocodingService to get coordinates and address
        var (latitude, longitude, status, address) = await GeocodingService.GeocodeAddress(_searchQuery);

        if (status == "OK")
        {
            NewSpace.Latitude = (decimal)latitude;
            NewSpace.Longitude = (decimal)longitude;
            NewSpace.Address = address; // Store the full address
        }
    }

    public Space ConfigureSpace(Space space)
    {
        Debug.Assert(_currentUser != null, nameof(_currentUser) + " != null");
        space.HostId = _currentUser.Id;
        space.Size = _selectedSize;
        space.Latitude = NewSpace.Latitude;
        space.Longitude = NewSpace.Longitude;
        space.Address = NewSpace.Address; // Ensure the address is set

        return space;
    }

    public async Task AddSpace()
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        ConfigureSpace(NewSpace);
        Console.WriteLine($"Adding Space with Address: {NewSpace.Address}");
        dbContext.Spaces.Add(NewSpace);
        await dbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/spaces");
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            var userId = UserManager.GetUserId(user);
            if (userId != null)
                _currentUser = await UserManager.FindByIdAsync(userId);
        }
    }


    // This page's input model.
    // This handles validation for end-user form input among other things. (e.g., defining data types which can be adapted based on user locale.)
    private sealed class InputModel
    {
        [Required]
        public string Location { get; set; } = "";

        [Required]
        [DataType(DataType.Currency)]
        [RegularExpression(@"[0-9]{1,3}(,[0-9]{3})*(\.[0-9]{2})?",
            ErrorMessage = "Price must be in [##.##] format.")]
        [Range(0, double.MaxValue, ErrorMessage = "Price must be a positive value")]
        public decimal Price { get; set; }

        [Required]
        public SpaceSize Size { get; set; }

        [Required]
        public string Description { get; set; } = "";

        [Required]
        public bool IsPublic { get; set; }
    }
}