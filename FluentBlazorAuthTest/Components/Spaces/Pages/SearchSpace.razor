@page "/spaces/search"

@using FluentBlazorAuthTest.Data
@using FluentBlazorAuthTest.Data.Services
@using FluentBlazorAuthTest.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.IdentityModel.Tokens


@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject ISpaceService SpaceService
@inject GeocodingService GeocodingService


@attribute [Authorize]

@rendermode InteractiveServer

<h1>Search for a Space</h1>
<FluentDivider Role="DividerRole.Separator"></FluentDivider>
<FluentSpacer Width="25"></FluentSpacer>

@if (!spaces.IsNullOrEmpty())
{
    foreach (var space in spaces)
    {
    <FluentSpacer Width="25"></FluentSpacer>
    <FluentCard Width="80%">
        <p>Location: @space.Address</p>
        <p>Size: @space.Size.ToString()</p>
        <p>Price: $@space.Price</p>
        <p>Description: @space.Description</p>

        @if (space.IsAvailable)
        {
            <p>Availability: Available to book</p>
            <FluentButton OnClick="@(() => BookNow(space.Id))">Book Now</FluentButton>
        }
        else
        {
            <p>Availability: Unavailable</p>
        }
        <p>Vacant Status: @space.IsVacant</p>
        <p>Public Status: @space.IsPublic </p>
    </FluentCard>
    <FluentSpacer Width="25"></FluentSpacer>
    }

<FluentSpacer Width="25"></FluentSpacer>
<div>
    @if (currentPage > 1)
        {
    <FluentButton OnClick="PreviousPage">Previous</FluentButton>
        }
    <span>Page @currentPage of @totalPages</span>
    @if (currentPage < totalPages)
        {
    <FluentButton OnClick="NextPage">Next</FluentButton>
        }
</div>
<FluentSpacer Width="25"></FluentSpacer>
}
else
{
    <p><em>There are no spaces to display.</em></p>
}


@code {
    private IEnumerable<Space> spaces;
    private int totalSpaces;
    private int currentPage = 1;
    private const int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)totalSpaces / pageSize);

    protected override async Task OnInitializedAsync()
    {
    await LoadSpaces();
    }

    private async Task LoadSpaces()
    {
        spaces = await SpaceService.GetAllSpacesAsync();
        (spaces, totalSpaces) = await SpaceService.GetSpacesPageAsync(currentPage, pageSize);

    }
    

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadSpaces();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadSpaces();
        }
    }
    private void BookNow(string spaceId)
    {
        NavigationManager.NavigateTo($"/book-space/{spaceId}");
    }
    async Task DeleteSpace(string Id)
    {
        await SpaceService.DeleteSpaceAsync(Id);
        spaces = await SpaceService.GetAllSpacesAsync();
    }

}