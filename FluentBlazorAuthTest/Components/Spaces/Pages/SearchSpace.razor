@page "/spaces/search"

@rendermode InteractiveServer

@using FluentBlazorAuthTest.Data
@using FluentBlazorAuthTest.Data.Services
@using Microsoft.EntityFrameworkCore

@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject ISpaceService SpaceService

<PageTitle>Search for a Space</PageTitle>

<h1>Search for a Space</h1>
<FluentButton Appearance="Appearance.Outline" @onclick="AddSpace">Add a new Space</FluentButton>



@if (spaces != null)
{
    foreach (var space in spaces)
    {
        <FluentCard>
            <p>Size: @space.Size.ToString()</p>
            <p>Price: $@space.Price</p>
            <p>Description: @space.Description</p>
            <FluentButton Appearance="Appearance.Accent" @onclick="@(() => EditSpace(space.Id))">Edit</FluentButton>
            <FluentButton Appearance="Appearance.Lightweight" Color="Red" @onclick="@(() => DeleteSpace(space.Id))">Delete</FluentButton>
            //make admin only
            //make confirmation window
        </FluentCard>
    }

}
@if (spaces == null)
{
    <p><em>Loading Spaces...</em></p>
}





@code {
    private IEnumerable<Space> spaces;
    private int totalSpaces;
    private int currentPage = 1;
    private const int pageSize = 5;
    // private bool isAdmin = false;

    public async Task<(IEnumerable<Space>, int)> GetPublicSpacesAsync(int pageNumber, int pageSize)
    {
        var query = DbContext.Spaces
            .Where(s => s.IsPublic)
            .OrderBy(s => s.DateCreated); // or any other ordering

        var totalSpaces = await query.CountAsync();

        var spaces = await query.Skip((pageNumber - 1) * pageSize)
            .Take(pageSize)
            .ToListAsync();

        return (spaces, totalSpaces);
    }

    private async Task LoadSpaces()
    {
        (spaces, totalSpaces) = await GetPublicSpacesAsync(currentPage, pageSize);
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        spaces = await SpaceService.GetAllSpacesAsync();
    }

    void EditSpace(string Id)
    {
        NavigationManager.NavigateTo($"/edit-space/{Id}");
    }
    async Task DeleteSpace(string Id)
    {
        await SpaceService.DeleteSpaceAsync(Id);
        spaces = await SpaceService.GetAllSpacesAsync();
    }
    void AddSpace()
    {
        NavigationManager.NavigateTo("/edit-space/");
    }


}
