@page "/edit-booking"
@page "/edit-booking/{Id}"

@using FluentBlazorAuthTest.Data
@using FluentBlazorAuthTest.Data.Services
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims


@inject IBookingService BookingService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

@rendermode InteractiveServer


@if(Id is null)
{
    <PageTitle>New Booking</PageTitle>
    <h3>New Booking</h3>
    


}
else
{
    <PageTitle>Edit Booking</PageTitle>
    <h3>Confirm Booking for "@CurrentBooking.Id"</h3>
}




<EditForm Model="CurrentBooking" OnSubmit="HandleSubmit">

    <div>
        @if (user != null && user.Identity.IsAuthenticated)
        {
            <div>
                <label>Booking ID:</label>
                <p>@CurrentBooking.Id</p>
            </div>

            <div>
                <label>Space ID:</label>
                <p>@CurrentBooking.SpaceId</p>
            </div>

            <div>
                <label>Created At:</label>
                <p>@CurrentBooking.CreatedAt.ToString("g")</p>
            </div>

            <div>
                <label>Updated At:</label>
                <p>@CurrentBooking.UpdatedAt.ToString("g")</p>
            </div>

            <div>
                <label>Client User ID:</label>
                <p>@CurrentBooking.ClientUserId</p>
            </div>

            <div>
                <label for="customerNotes">Customer Notes:</label>
                <InputTextArea id="customerNotes" @bind-Value="CurrentBooking.CustomerNotes" />
            </div>
            @if (user.IsInRole("Admin"))
             {
                <div>
                      <label for="adminNotes">Admin Notes:</label>
                      <InputTextArea id="adminNotes" @bind-Value="CurrentBooking.AdminNotes" />
                 </div>
             }
            <div>
                <label for="startDateTime">Start Date & Time:</label>
                <InputDate id="startDateTime" @bind-Value="CurrentBooking.StartDateTime" min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
            </div>

            <div>
                <label for="endDateTime">End Date & Time:</label>
                <InputDate id="endDateTime" @bind-Value="CurrentBooking.EndDateTime" min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
            </div>
                    
        }

    </div>
        

    <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Save</FluentButton>

</EditForm>



@code {
    [Parameter]
    public string? Id { get; set; }

    public Booking CurrentBooking { get; set; } = new();
    private bool IsExistingBooking { get; set; } = false;

    private ClaimsPrincipal user;
    private ApplicationUser currentUser;



    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
        {
            // Use the Id from the URL as the SpaceId
            CurrentBooking.SpaceId = Id;

            var booking = await BookingService.GetBookingByIdAsync((string)Id);
            if (booking != null)
            {
                CurrentBooking = booking;
                IsExistingBooking = true;
            }
        }
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User; // Store the user in the property

        if (user.Identity.IsAuthenticated)
        {
            var userId = UserManager.GetUserId(user);
            currentUser = await UserManager.FindByIdAsync(userId);
        }
        CurrentBooking.ClientUserId = await GetCurrentUserIdAsync();
    }

    private async Task<string> GetCurrentUserIdAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.Identity.IsAuthenticated ? user.FindFirst(ClaimTypes.NameIdentifier)?.Value : null;
    }


    async Task HandleSubmit()
    {
        if (IsExistingBooking)
        {
            // Update existing booking
            //await BookingService.UpdateBookingPriceBasedOnSpace(CurrentBooking.Id);

            CurrentBooking.BookingStatus = BookingStatus.Pending;
            await BookingService.UpdateBookingAsync(CurrentBooking, (string)Id);
        }
        else
        {
            // Create a new booking
            CurrentBooking.BookingStatus = BookingStatus.Pending;
            await BookingService.AddBookingAsync(CurrentBooking);
            await BookingService.UpdateBookingPriceBasedOnSpace(CurrentBooking.Id);
            await BookingService.UpdatePaymentStatusUnpaidByIdAsync(CurrentBooking.Id, CurrentBooking.BookingStatus);

        }

        // Redirect after handling
        NavigationManager.NavigateTo("/Book/");
    }

}
