@using FluentBlazorAuthTest.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore.Metadata

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

@inherits LayoutComponentBase

<FluentLayout>
    <MainHeader/>

        <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
            <AuthorizeView>
                <Authorized>
                    <NavMenu />
                </Authorized>
            </AuthorizeView>
            <FluentBodyContent>
                <div class="content">
                    @Body
                </div>
            </FluentBodyContent>
        </FluentStack>
    <!-- Footer Menu -->
    <FluentFooter>
        <div class="footer-links">
            <div class="link">
                <a href="https://localhost:7275/" target="_blank">Home</a>
            </div>
            <div class="link">
                <a href="https://localhost:7275/Explore" target="_blank">Explore</a>
            </div>
            <div class="link">
                <a href="https://localhost:7275/Settings" target="_blank">Settings</a>
            </div>
            <div class="link">
                <a href="https://localhost:7275/Support" target="_blank">Support</a>
            </div>
        </div>
    </FluentFooter>
</FluentLayout>

<!-- Error Message -->
<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<style>

    .header {
        background-color: #333;
        color: #fff;
        padding: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .logo {
        margin-right: 20px;
    }

    .header-menu ul {
        list-style: none;
        padding: 0;
        margin: 0;
        display: flex;
    }

        .header-menu ul li {
            margin-right: 20px;
        }

            .header-menu ul li a {
                color: #fff;
                text-decoration: none;
            }

                .header-menu ul li a:hover {
                    text-decoration: underline;
                }

    .footer-links {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        padding: 10px;
        box-sizing: border-box;
    }

    .link {
        flex: 1;
        text-align: center;
    }

        .link a {
            text-decoration: none;
            color: #333;
            display: block;
            padding: 10px;
            font-size: 16px;
            font-weight: bold;
        }
</style>

@code
{
    private string? fullName;
    private ApplicationUser currentUser;

    //  executed during component initialization
    protected override async Task OnInitializedAsync()
    {
        // Retrieving authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Checking if user is authenticated
        if (user.Identity.IsAuthenticated)
        {
            // Retrieving user details if authenticated
            var userId = UserManager.GetUserId(user);
            currentUser = await UserManager.FindByIdAsync(userId);
            fullName = $"{currentUser.FirstName} {currentUser.LastName}";
        }
    }
}
