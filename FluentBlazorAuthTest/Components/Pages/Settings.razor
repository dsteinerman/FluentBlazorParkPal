@page "/Settings"
@inject IJSRuntime JSRuntime
@using System.Collections.Generic
<PageTitle>Settings</PageTitle>

<h3>Settings</h3>


<div class="settings-container @(IsLightTheme ? "light-theme" : "dark-theme")">

   
    <h4>Notification Preferences</h4>
    <div class="notification-options">
        @foreach (var option in NotificationOptions)
        {
            <div>
                <input type="checkbox" @bind="option.Selected" /> @option.Label
            </div>
        }
    </div>

   
    <h4>Language</h4>
    <div class="language-selector">
        <select @bind="SelectedLanguage">
            @foreach (var language in LanguageOptions)
            {
                <option value="@language">@language</option>
            }
        </select>
    </div>

   
    <h4>Theme</h4>
    <div class="theme-selector">
        <label><input type="radio" name="theme" value="light" checked="@IsLightTheme" @onchange="e => SetTheme(e.Value.ToString())" /> Light</label>
        <label><input type="radio" name="theme" value="dark" checked="!IsLightTheme" @onchange="e => SetTheme(e.Value.ToString())" /> Dark</label>
    </div>
</div>

@code {
    // List of notification options
    private List<SettingsOption> NotificationOptions = new List<SettingsOption>
    {
        new SettingsOption { Label = "Email", Selected = true },
        new SettingsOption { Label = "Push Notifications", Selected = false },
    };

    // List of language options
    private List<string> LanguageOptions = new List<string>
    {
        "English",
        "Spanish",
        "French",
    };

    // Selected language from LanguageOptions
    private string SelectedLanguage { get; set; } = "English";

    // Boolean to track the selected theme
    private bool IsLightTheme { get; set; } = true;

    // Settings option structure
    public class SettingsOption
    {
        public string Label { get; set; }
        public bool Selected { get; set; }
    }

    // Method to set the theme based on user selection
    private async Task SetTheme(string theme)
    {
        IsLightTheme = theme == "light"; // Updating the selected theme
        await JSRuntime.InvokeVoidAsync("applyTheme", theme); // Applying the theme through JavaScript
        Console.WriteLine($"Theme set to: {theme}"); // Logging the theme change
    }

    // Method called after rendering to apply the theme
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("applyTheme", IsLightTheme ? "light" : "dark"); // Applying the theme on first render
        }
    }
}

<link rel="stylesheet" href="/HTML/CSS/Styles.css" />
<link rel="stylesheet" href="/HTML/CSS/DarkMode.css">
<script src="/JS/Darkmode.js"></script>


